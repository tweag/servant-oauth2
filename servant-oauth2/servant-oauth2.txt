-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A library for OAuth2 authentication in servant.
--   
--   A library for OAuth2 authentication in servant. It is a modern wrapper
--   around wai-middleware-auth, and provides the ability to build
--   type-safe authorised APIs with authentication provided by the wai
--   oauth2 backends.
@package servant-oauth2
@version 0.1.0.1


-- | A modern wrapper around
--   <a>https://github.com/fpco/wai-middleware-auth/</a>.
--   
--   This library can be used to add type-level authentication and
--   authorisation into a Servant api via OAuth2. You might be interested
--   in this if you are using Servant as a light-weight webserver serving
--   <tt>Html</tt>, for example.
module Servant.OAuth2

-- | A simple way to add a type-level tag onto the return type for your
--   <tt>AuthServerData</tt> instance. Used something like: <tt><a>Tag</a>
--   <tt>Github</tt> ...</tt>; this then allows you to use multiple oauth
--   providers on one server, and have servant still pick out the right
--   auth handler to use. See:
--   <a>https://docs.servant.dev/en/stable/tutorial/Authentication.html#recap</a>
--   for more detail.
newtype Tag a (rs :: [Type])
Tag :: Union rs -> Tag a (rs :: [Type])
[unTag] :: Tag a (rs :: [Type]) -> Union rs

-- | This is the result of successful completion of the OAuth2 login
--   workflow; it is the identifier that comes back from the provider.
type Ident = ByteString

-- | This contains the <a>complete</a> route that the given OAuth2 provider
--   will return to. This implementation for this is fully given by the
--   <a>authServer</a> function.
data OAuth2Routes (rs :: [Type]) mode
AuthRoutes :: (mode :- ("complete" :> UVerb 'GET '[HTML] rs)) -> OAuth2Routes (rs :: [Type]) mode
[complete] :: OAuth2Routes (rs :: [Type]) mode -> mode :- ("complete" :> UVerb 'GET '[HTML] rs)

-- | The server implementation for the <a>OAuth2Routes</a> routes.
--   Ultimately, this just returns the result of the <a>success</a>
--   function from <a>OAuth2Settings</a>.
authServer :: forall m a (rs :: [Type]). Monad m => Tag a rs -> OAuth2Routes rs (AsServerT m)

-- | The central handler that runs when the <a>complete</a> route is
--   called. In here we pass of to <a>handleLogin</a> via <a>runOAuth2</a>,
--   and we unwrap the results; if there was any error, we throw a servant
--   error, or, in the happy case that we successfully authenticate, we
--   call the <a>success</a> function and return, which is then (after
--   unwrapping) returned by the <a>authServer</a>.
oauth2AuthHandler :: forall m p rs e. (AuthProvider p, MonadIO m, MonadThrow m, MonadError e m, Monad m) => OAuth2Settings m p rs -> (m (Tag p rs) -> Handler (Tag p rs)) -> AuthHandler Request (Tag p rs)

-- | In the context of Wai, run the <a>complete</a> step of the OAuth2
--   process. We return a <a>Response</a>, unfortunately, which we will
--   later interpret into Servant responses.
runOAuth2 :: (MonadIO m, AuthProvider p) => Request -> p -> (AuthLoginState -> IO Response) -> (Status -> ByteString -> IO Response) -> m Response

-- | Used to record the particular provider you are using, along with the
--   ultimate return type of the <a>complete</a> route, that will, in the
--   end, need to agree with the particular implementation of the
--   <a>success</a> function.
data OAuth2Settings m p (rs :: [Type])
OAuth2Settings :: (Request -> Ident -> m (Union rs)) -> p -> OAuth2Settings m p (rs :: [Type])
[success] :: OAuth2Settings m p (rs :: [Type]) -> Request -> Ident -> m (Union rs)
[provider] :: OAuth2Settings m p (rs :: [Type]) -> p

-- | Default settings, only really suitable for demo purposes, that simply
--   always respond with just the return value of the OAuth2 route;
--   typically the email, depending on how your provider is configured.
--   
--   Note that in order to use this, your instance of
--   <tt>AuthServerData</tt> must return <tt>'[<a>WithStatus</a> 200
--   <a>Text</a>]</tt>.
defaultOAuth2Settings :: forall m p. Applicative m => p -> OAuth2Settings m p '[WithStatus 200 Text]
instance GHC.Generics.Generic (Servant.OAuth2.OAuth2Routes rs mode)

module Servant.OAuth2.Cookies

-- | A helpful alias for returning a <tt>Location</tt> header and a
--   <a>SetCookie</a> header.
type RedirectWithCookie = Headers '[Header "Location" Text, Header "Set-Cookie" SetCookie] NoContent

-- | Default name of our cookie.
ourCookie :: ByteString

-- | An empty cookie; useful to set when logging out.
emptyCookie :: SetCookie

-- | Set a cookie and then perform a redirection; typically used as part of
--   logging in; i.e. after successfully performing OAuth2 authentication,
--   we just want to redirect back to the homepage.
redirectWithCookie :: Text -> SetCookie -> RedirectWithCookie

-- | Build a simple cookie provided you have a function that can convert
--   the ident into a sessionId kind of object.
simpleCookieOAuth2Settings :: forall s m p. (Binary s, Applicative m, Monad m, MonadIO m) => p -> (Request -> Ident -> m s) -> Key -> OAuth2Settings m p '[WithStatus 303 RedirectWithCookie]

-- | Make a session cookie from the ident; i.e. just set the cookie to be
--   the ident value.
buildSessionCookie :: Binary s => Key -> s -> IO SetCookie

-- | Perform the decryption of the cookie in reverse order to
--   <a>buildSessionCookie</a>.
getSessionIdFromCookie :: Binary s => Request -> Key -> Maybe s


-- | A collection of hacky functions needed to work around the fact that
--   'wai-middleware-auth' is presently defined in terms of Wai, and,
--   really, we want something that is defined for Servant.
module Servant.OAuth2.Hacks

-- | For some settings specialised to <a>Github</a>, return the login url.
getGithubLoginUrl :: Text -> OAuth2Settings m Github a -> Text

-- | For some settings specialised to <a>Google</a>, return the login url.
getGoogleLoginUrl :: Text -> OAuth2Settings m Google a -> Text

-- | An extremely unfortunate way of getting the redirect URL; stolen from
--   <a>Internal</a>.
getRedirectUrl :: Text -> OAuth2 -> Maybe [Text] -> Text
